// Mocks generated by Mockito 5.4.6 from annotations
// in si_komik/test/data/datasources/sikomik_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:si_komik/data/datasources/sikomik_remote_data_source.dart'
    as _i6;
import 'package:si_komik/data/models/chapter_model.dart' as _i5;
import 'package:si_komik/data/models/comic_detail_model.dart' as _i4;
import 'package:si_komik/data/models/comic_model.dart' as _i3;
import 'package:si_komik/data/models/configuration_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConfigurationModel_0 extends _i1.SmartFake
    implements _i2.ConfigurationModel {
  _FakeConfigurationModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComicModel_1 extends _i1.SmartFake implements _i3.ComicModel {
  _FakeComicModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComicDetailModel_2 extends _i1.SmartFake
    implements _i4.ComicDetailModel {
  _FakeComicDetailModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChapterModel_3 extends _i1.SmartFake implements _i5.ChapterModel {
  _FakeChapterModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SiKomikRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSiKomikRemoteDataSource extends _i1.Mock
    implements _i6.SiKomikRemoteDataSource {
  MockSiKomikRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.ConfigurationModel> getConfiguration() => (super.noSuchMethod(
        Invocation.method(
          #getConfiguration,
          [],
        ),
        returnValue:
            _i7.Future<_i2.ConfigurationModel>.value(_FakeConfigurationModel_0(
          this,
          Invocation.method(
            #getConfiguration,
            [],
          ),
        )),
      ) as _i7.Future<_i2.ConfigurationModel>);

  @override
  _i7.Future<_i3.ComicModel> getLatestComic({
    required int? page,
    String? q,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestComic,
          [],
          {
            #page: page,
            #q: q,
          },
        ),
        returnValue: _i7.Future<_i3.ComicModel>.value(_FakeComicModel_1(
          this,
          Invocation.method(
            #getLatestComic,
            [],
            {
              #page: page,
              #q: q,
            },
          ),
        )),
      ) as _i7.Future<_i3.ComicModel>);

  @override
  _i7.Future<_i4.ComicDetailModel> getComicDetail({required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComicDetail,
          [],
          {#path: path},
        ),
        returnValue:
            _i7.Future<_i4.ComicDetailModel>.value(_FakeComicDetailModel_2(
          this,
          Invocation.method(
            #getComicDetail,
            [],
            {#path: path},
          ),
        )),
      ) as _i7.Future<_i4.ComicDetailModel>);

  @override
  _i7.Future<_i5.ChapterModel> getChapter({required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChapter,
          [],
          {#path: path},
        ),
        returnValue: _i7.Future<_i5.ChapterModel>.value(_FakeChapterModel_3(
          this,
          Invocation.method(
            #getChapter,
            [],
            {#path: path},
          ),
        )),
      ) as _i7.Future<_i5.ChapterModel>);

  @override
  _i7.Future<_i3.ComicModel> searchComic({required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchComic,
          [],
          {#query: query},
        ),
        returnValue: _i7.Future<_i3.ComicModel>.value(_FakeComicModel_1(
          this,
          Invocation.method(
            #searchComic,
            [],
            {#query: query},
          ),
        )),
      ) as _i7.Future<_i3.ComicModel>);
}
